<?xml version="1.0" encoding="utf-8"?>
<pex id="{7f246748-e674-4e12-a8b3-b3cbc8b12d0a}" creationTime="2014-11-11 21:46:40Z" configuration="JunkYard.E!\Program!\*" created="2014-11-11 21:46:40Z" pexVersion="1.0.0.0" xml="C:\Users\nitinar\documents\visual studio 2013\Projects\JunkYard\IEnumerable\bin\Debug\reports\141112.104640.12472.pex\report.per" html="C:\Users\nitinar\documents\visual studio 2013\Projects\JunkYard\IEnumerable\bin\Debug\reports\141112.104640.12472.pex\report.html"><environment commandLine="&quot;C:\Users\nitinar\AppData\Local\Microsoft\VisualStudio\12.0\Extensions\1ydf5sxi.dio\Microsoft.Pex.x86.exe&quot; &quot;C:\Users\nitinar\documents\visual studio 2013\Projects\JunkYard\IEnumerable\bin\Debug\IEnumerable.exe&quot; /mmf:M|Main!|s|1 /nf:JunkYard.E! /tf:Program! /erm:LazyWizard /ac /x86 /nor /rl:Xml /ro:&quot;C:\Users\nitinar\documents\visual studio 2013\Projects\JunkYard\IEnumerable\bin\Debug\reports&quot; /tan:JunkYard.Tests /testf:Direct /testl:cs /testp:&quot;C:\Users\nitinar\documents\visual studio 2013\Projects\JunkYard\IEnumerable\JunkYard.csproj&quot; /testpnoup /skiptest" machineName="NITINAW7PC" osVersion="Microsoft Windows NT 6.1.7601 Service Pack 1" processorCount="8" clrVersion="4.0.30319.18408" bitness="x86" user="nitinar"><envVars><envVar name="HOMEPATH" value="\"/>
<envVar name="COMPUTERNAME" value="NITINAW7PC"/>
<envVar name="UATDATA" value="C:\Windows\CCM\UATData\D9F8C395-CAB8-491d-B8AC-179A1FE1BE77"/>
<envVar name="CommonProgramFiles(x86)" value="C:\Program Files (x86)\Common Files"/>
<envVar name="PROCESSOR_IDENTIFIER" value="Intel64 Family 6 Model 58 Stepping 9, GenuineIntel"/>
<envVar name="SESSIONNAME" value="Console"/>
<envVar name="VisualStudioEdition" value="Microsoft Visual Studio Premium 2013"/>
<envVar name="PROCESSOR_REVISION" value="3a09"/>
<envVar name="CLRMONITOR_INSTRUMENT_TYPES_EXCLUSIONS" value=""/>
<envVar name="PATHEXT" value=".COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC"/>
<envVar name="PkgDefApplicationConfigFile" value="C:\Users\nitinar\AppData\Local\Temp\devB31F.tmp"/>
<envVar name="VS120COMNTOOLS" value="C:\Program Files (x86)\Microsoft Visual Studio 12.0\Common7\Tools\"/>
<envVar name="CLRMONITOR_CLSID" value="{C1DAAFC4-10C6-4838-9F89-435E2120F5F1}"/>
<envVar name="VS100COMNTOOLS" value="C:\Program Files (x86)\Microsoft Visual Studio 10.0\Common7\Tools\"/>
<envVar name="SystemDrive" value="C:"/>
<envVar name="TMP" value="C:\Users\nitinar\AppData\Local\Temp"/>
<envVar name="TEMP" value="C:\Users\nitinar\AppData\Local\Temp"/>
<envVar name="LOCALAPPDATA" value="C:\Users\nitinar\AppData\Local"/>
<envVar name="PUBLIC" value="C:\Users\Public"/>
<envVar name="TFSPowerToolDir" value="C:\Program Files (x86)\Microsoft Team Foundation Server 2013 Power Tools\"/>
<envVar name="CLRMONITOR_PROTECT_TYPES" value=""/>
<envVar name="CLRMONITOR_INITIALIZED" value="0xd"/>
<envVar name="USERDNSDOMAIN" value="DATACOM.CO.NZ"/>
<envVar name="USERDOMAIN" value="DATACOM"/>
<envVar name="ComSpec" value="C:\Windows\system32\cmd.exe"/>
<envVar name="CLRMONITOR_ERASE_FINALIZER_TYPES" value=""/>
<envVar name="PROCESSOR_LEVEL" value="6"/>
<envVar name="NUMBER_OF_PROCESSORS" value="8"/>
<envVar name="VisualStudioVersion" value="12.0"/>
<envVar name="CommonProgramFiles" value="C:\Program Files (x86)\Common Files"/>
<envVar name="ProgramFiles(x86)" value="C:\Program Files (x86)"/>
<envVar name="CLRMONITOR_INSTRUMENT_NAMESPACES_EXCLUSIONS" value=""/>
<envVar name="CLRMONITOR_FLAGS" value=""/>
<envVar name="VisualStudioDir" value="C:\Users\nitinar\Documents\Visual Studio 2013"/>
<envVar name="pex_instrumentation" value="1"/>
<envVar name="COR_PROFILER_PATH" value="C:\Users\nitinar\AppData\Local\Microsoft\VisualStudio\12.0\Extensions\1ydf5sxi.dio\Microsoft.ExtendedReflection.ClrMonitor.X86.dll"/>
<envVar name="asl.log" value="Destination=file"/>
<envVar name="CLRMONITOR_INSTRUMENT_TYPES" value="System.Array,System.Array+ArrayEnumerator,System.Array+FunctorComparer`1,System.Array+SZArrayEnumerator,System.Array+SorterGenericArray,System.Array+SorterObjectArray,System.Boolean,System.Byte,System.Char,System.CharEnumerator,System.ComponentModel.Component,System.ComponentModel.Container,System.ComponentModel.Container+Site,System.Convert,System.Currency,System.DateTime,System.DateTimeOffset,System.Decimal,System.Diagnostics.Assert,System.Double,System.Globalization.CharUnicodeInfo,System.Globalization.CultureTableRecord,System.Globalization.TextInfo,System.Guid,System.IO.MemoryStream,System.IO.Stream,System.IO.StreamReader,System.IO.StreamWriter,System.IO.StringReader,System.IO.StringWriter,System.Int16,System.Int32,System.Int64,System.Lazy`1,System.Lazy`1+Boxed,System.Lazy`1+LazyInternalExceptionHolder,System.Math,System.Nullable,System.Nullable`1,System.OrdinalComparer,System.SByte,System.SZArrayHelper,System.SZArrayHelper+SZGenericArrayEnumerator`1,System.Single,System.String,System.StringComparer,System.Text.ASCIIEncoding,System.Text.DecoderNLS,System.Text.Encoding,System.Text.UTF8Encoding,System.TimeSpan,System.Tuple,System.Tuple`1,System.Tuple`2,System.Tuple`3,System.Tuple`4,System.Tuple`5,System.Tuple`6,System.Tuple`7,System.Tuple`8,System.UInt16,System.UInt32,System.UInt64,System.Xml.XmlTextWriter,System.Xml.XmlTextWriter+Namespace,System.Xml.XmlTextWriter+NamespaceState,System.Xml.XmlTextWriter+SpecialAttr,System.Xml.XmlTextWriter+State,System.Xml.XmlTextWriter+TagInfo,System.Xml.XmlTextWriter+Token,System.Xml.XmlWriter,System.Xml.XmlWriter+&lt;WriteAttributeStringAsyncHelper&gt;d__0,System.Xml.XmlWriter+&lt;WriteAttributesAsync&gt;d__7,System.Xml.XmlWriter+&lt;WriteElementStringAsync&gt;d__20,System.Xml.XmlWriter+&lt;WriteLocalNamespacesAsync&gt;d__23,System.Xml.XmlWriter+&lt;WriteNodeAsync&gt;d__19,System.Xml.XmlWriter+&lt;WriteNodeAsync_CallAsyncReader&gt;d__10,System.Xml.XmlWriter+&lt;WriteNodeAsync_CallSyncReader&gt;d__a,System.Xml.XmlWriter+&lt;WriteQualifiedNameAsync&gt;d__3,__Box`1,__SzArrayHelper`1"/>
<envVar name="HOMESHARE" value="\\dnzwgfp1\nitinar$"/>
<envVar name="ProgramData" value="C:\ProgramData"/>
<envVar name="ProgramW6432" value="C:\Program Files"/>
<envVar name="ProgramFiles" value="C:\Program Files (x86)"/>
<envVar name="BPADir" value="C:\Program Files (x86)\Microsoft Team Foundation Server 2013 Power Tools\Best Practices Analyzer\"/>
<envVar name="CLRMONITOR_ERASE_CCTOR_TYPES" value=""/>
<envVar name="FP_NO_HOST_CHECK" value="NO"/>
<envVar name="COR_PROFILER" value="{C1DAAFC4-10C6-4838-9F89-435E2120F5F1}"/>
<envVar name="pex_clientid" value="pex12212_1"/>
<envVar name="windir" value="C:\Windows"/>
<envVar name="SystemRoot" value="C:\Windows"/>
<envVar name="CLRMONITOR_PROTECT_ALL_CCTORS" value="1"/>
<envVar name="pex_server_channel" value="pex12212"/>
<envVar name="CommonProgramW6432" value="C:\Program Files\Common Files"/>
<envVar name="LOGONSERVER" value="\\DNZDC3"/>
<envVar name="USERPROFILE" value="C:\Users\nitinar"/>
<envVar name="MSBuildLoadMicrosoftTargetsReadOnly" value="true"/>
<envVar name="CLRMONITOR_SUBSTITUTIONS" value="C:\Users\nitinar\AppData\Local\Microsoft\VisualStudio\12.0\Extensions\1ydf5sxi.dio\Microsoft.ExtendedReflection.Reasoning.dll"/>
<envVar name="VSLANG" value="1033"/>
<envVar name="APPDATA" value="C:\Users\nitinar\AppData\Roaming"/>
<envVar name="HOMEDRIVE" value="F:"/>
<envVar name="PSModulePath" value="C:\Windows\system32\WindowsPowerShell\v1.0\Modules\;C:\Program Files\Microsoft Security Client\MpProvider\;C:\Program Files (x86)\Microsoft SQL Server\110\Tools\PowerShell\Modules\;C:\Program Files (x86)\Microsoft SDKs\Azure\PowerShell\ServiceManagement;C:\Program Files\Microsoft Message Analyzer\PowerShell\"/>
<envVar name="VS110COMNTOOLS" value="C:\Program Files (x86)\Microsoft Visual Studio 11.0\Common7\Tools\"/>
<envVar name="USERNAME" value="nitinar"/>
<envVar name="PROCESSOR_ARCHITEW6432" value="AMD64"/>
<envVar name="PROCESSOR_ARCHITECTURE" value="x86"/>
<envVar name="CLRMONITOR_INSTRUMENT_ASSEMBLIES_EXCLUSIONS" value="Microsoft.QualityTools.Testing.Fakes"/>
<envVar name="OS" value="Windows_NT"/>
<envVar name="CLRMONITOR_INSTRUMENT_NAMESPACES" value="System.Collections,System.Collections.Generic,System.Collections.ObjectModel,System.Collections.Specialized,System.Diagnostics.Contracts"/>
<envVar name="Path" value="C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Program Files (x86)\Windows Kits\8.1\Windows Performance Toolkit\;C:\Program Files\Microsoft SQL Server\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\110\Tools\Binn\ManagementStudio\;C:\Program Files (x86)\Microsoft SQL Server\110\Tools\Binn\;C:\Program Files (x86)\Microsoft SQL Server\110\DTS\Binn\;C:\Program Files (x86)\Microsoft SDKs\Windows Azure\CLI\wbin;C:\Program Files (x86)\Microsoft ASP.NET\ASP.NET Web Pages\v1.0\;C:\Program Files (x86)\Microsoft Team Foundation Server 2013 Power Tools\;C:\Program Files (x86)\Microsoft Team Foundation Server 2013 Power Tools\Best Practices Analyzer\;C:\Program Files (x86)\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\Tools\Binn\;C:\Program Files\Microsoft SQL Server\100\DTS\Binn\;C:\Program Files\Microsoft\Web Platform Installer\;C:\Program Files (x86)\Microsoft SDKs\TypeScript\1.0\;C:\Program Files (x86)\Microsoft SDKs\Azure\CLI\wbin;C:\Windows\System32\WindowsPowerShell\v1.0\"/>
<envVar name="CLRMONITOR_INSTRUMENT_ASSEMBLIES" value="IEnumerable,JunkYard.Tests,Microsoft.Contracts,Microsoft.VisualBasic,Microsoft.VisualStudio.QualityTools.UnitTestFramework,System,System.Core,System.Web,xunit"/>
<envVar name="ALLUSERSPROFILE" value="C:\ProgramData"/>
</envVars>
</environment>
<settings/>
<reflection><dump category="Instrumentation" title="instrumentation settings"><![CDATA[gc tracking: disabled
monitoring flags: 
assemblies
IEnumerable: instrumented
System: instrumented
System.Web: instrumented
Microsoft.Contracts: instrumented
xunit: instrumented
Microsoft.VisualStudio.QualityTools.UnitTestFramework: instrumented
Microsoft.QualityTools.Testing.Fakes: uninstrumented
System.Core: instrumented
Microsoft.VisualBasic: instrumented
namespaces
System.Collections: instrumented
System.Diagnostics.Contracts: instrumented
System.Collections.Generic: instrumented
System.Collections.ObjectModel: instrumented
System.Collections.Specialized: instrumented
types
System.Xml.XmlWriter: instrumented
System.Xml.XmlWriter+<WriteAttributeStringAsyncHelper>d__0: instrumented
System.Xml.XmlWriter+<WriteQualifiedNameAsync>d__3: instrumented
System.Xml.XmlWriter+<WriteAttributesAsync>d__7: instrumented
System.Xml.XmlWriter+<WriteNodeAsync_CallSyncReader>d__a: instrumented
System.Xml.XmlWriter+<WriteNodeAsync_CallAsyncReader>d__10: instrumented
System.Xml.XmlWriter+<WriteNodeAsync>d__19: instrumented
System.Xml.XmlWriter+<WriteElementStringAsync>d__20: instrumented
System.Xml.XmlWriter+<WriteLocalNamespacesAsync>d__23: instrumented
System.Xml.XmlTextWriter: instrumented
System.Xml.XmlTextWriter+NamespaceState: instrumented
System.Xml.XmlTextWriter+TagInfo: instrumented
System.Xml.XmlTextWriter+Namespace: instrumented
System.Xml.XmlTextWriter+SpecialAttr: instrumented
System.Xml.XmlTextWriter+State: instrumented
System.Xml.XmlTextWriter+Token: instrumented
__SzArrayHelper`1: instrumented
__Box`1: instrumented
System.Currency: instrumented
System.Array: instrumented
System.Array+FunctorComparer`1: instrumented
System.Array+SorterObjectArray: instrumented
System.Array+SorterGenericArray: instrumented
System.Array+SZArrayEnumerator: instrumented
System.Array+ArrayEnumerator: instrumented
System.SZArrayHelper: instrumented
System.SZArrayHelper+SZGenericArrayEnumerator`1: instrumented
System.CharEnumerator: instrumented
System.Globalization.CultureTableRecord: instrumented
System.Text.DecoderNLS: instrumented
System.Diagnostics.Assert: instrumented
System.OrdinalComparer: instrumented
System.Tuple: instrumented
System.Tuple`1: instrumented
System.Tuple`2: instrumented
System.Tuple`3: instrumented
System.Tuple`4: instrumented
System.Tuple`5: instrumented
System.Tuple`6: instrumented
System.Tuple`7: instrumented
System.Tuple`8: instrumented
System.Lazy`1: instrumented
System.Lazy`1+Boxed: instrumented
System.Lazy`1+LazyInternalExceptionHolder: instrumented
System.Nullable: instrumented
System.Nullable`1: instrumented
System.Boolean: instrumented
System.Guid: instrumented
System.String: instrumented
System.Char: instrumented
System.Byte: instrumented
System.SByte: instrumented
System.Int16: instrumented
System.Int32: instrumented
System.Int64: instrumented
System.UInt16: instrumented
System.UInt32: instrumented
System.UInt64: instrumented
System.Decimal: instrumented
System.Math: instrumented
System.Double: instrumented
System.Single: instrumented
System.DateTime: instrumented
System.DateTimeOffset: instrumented
System.TimeSpan: instrumented
System.Convert: instrumented
System.StringComparer: instrumented
System.Globalization.CharUnicodeInfo: instrumented
System.Globalization.TextInfo: instrumented
System.IO.Stream: instrumented
System.IO.StringWriter: instrumented
System.IO.StringReader: instrumented
System.IO.StreamReader: instrumented
System.IO.StreamWriter: instrumented
System.IO.MemoryStream: instrumented
System.Text.Encoding: instrumented
System.Text.UTF8Encoding: instrumented
System.Text.ASCIIEncoding: instrumented
System.ComponentModel.Container: instrumented
System.ComponentModel.Container+Site: instrumented
System.ComponentModel.Component: instrumented
substitutions
C:\Users\nitinar\AppData\Local\Microsoft\VisualStudio\12.0\Extensions\1ydf5sxi.dio\Microsoft.ExtendedReflection.Reasoning.dll
]]></dump>
<log level="message" time="2014-11-11 21:46:42Z" category="tests" message="symbol test hasher not supported: no symbols manager present"/>
<log level="message" time="2014-11-11 21:46:42Z" category="tests" message="testhasher Microsoft.Pex.Engine.TestGeneration.PexSymbolTestHasher not supported"/>
</reflection>
<assembly name="IEnumerable" version="1.0.0.0" fileVersion="1.0.0.0" fullName="IEnumerable, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" location="C:\Users\nitinar\documents\visual studio 2013\Projects\JunkYard\IEnumerable\bin\Debug\IEnumerable.exe" fileName="IEnumerable.exe"><settings testFramework="Direct" ignoreAppConfig="True" testLanguage="cs"/>
<dump category="wizard" title="code generation"><![CDATA[visibility: exported and assembly(IEnumerable)
Processing 10 types
Processing IEnumerable
Scanning assembly references in IEnumerable
Applying template AssemblyInfo to IEnumerable
generating method bodies
flushing generated code
updating assembly references
]]></dump>
<fixture name="ProgramTest" type="JunkYard.E.ProgramTest" typeName="ProgramTest" token="2000002" href="fix\JunkYard.Tests.178.html"><type name="JunkYard.E.ProgramTest"/>
<settings typeUnderTest="JunkYard.E.Program"/>
<exploration shortName="Main(String[])" fullName="JunkYard.E.ProgramTest.Main(String[])" isDynamicCode="true"><method name="System.Void JunkYard.E.ProgramTest.Main(System.String[] args)"/>
<target name="method System.Void JunkYard.E.Program.Main(System.String[] args)"/>
<memberUnderTest name="JunkYard.E.Program.Main"/>
<test name="Main" state="success" duration="0.75"><console stream="out" mode="memory"><![CDATA[System.Runtime.InteropServices.ComVisibleAttribute
System.AttributeUsageAttribute
__DynamicallyInvokableAttribute
System.SerializableAttribute
Boolean AllowMultiple
System.AttributeTargets ValidOn
Boolean Inherited
System.Object TypeId
Zip.Compress
Rar.Compress
]]></console>
</test>
<test name="Main" state="success" duration="0.02"><console stream="out" mode="memory"><![CDATA[System.Runtime.InteropServices.ComVisibleAttribute
System.AttributeUsageAttribute
__DynamicallyInvokableAttribute
System.SerializableAttribute
Boolean AllowMultiple
System.AttributeTargets ValidOn
Boolean Inherited
System.Object TypeId
Zip.Compress
Rar.Compress
]]></console>
</test>
<generatedTest id="f8e71c40-5a8b-4f15-afa3-6fdf9db89964" index="1" run="2" status="normaltermination" explorationIsDynamicCode="true" generated="true" new="true"><testMethod name="System.Void JunkYard.E.ProgramTest.Main70()"/>
<rcov name="Block" dcov="29" dtot="29" acov="29" atot="29"/>
<value name="args">null</value>
<code><![CDATA[using (PexPConsoleInContext.Create())
{
  IPexChoiceRecorder choices = PexChoose.Replay.Setup();
  choices.DefaultSession
      .At(2, "close", (object)true);
  this.Main((string[])null);
}
]]></code>
<methodCode imports="Microsoft.Pex.Framework.Generated;Microsoft.Pex.Framework"><![CDATA[[PexGeneratedBy(typeof(ProgramTest))]
public void Main70()
{
    using (PexPConsoleInContext.Create())
    {
      IPexChoiceRecorder choices = PexChoose.Replay.Setup();
      choices.DefaultSession
          .At(2, "close", (object)true);
      this.Main((string[])null);
    }
}
]]></methodCode>
<reference name="assembly Microsoft.Pex.Framework"/>
<reference name="assembly mscorlib"/>
<reference name="assembly JunkYard.Tests"/>
<pathAssumption><![CDATA[return choiceof(default, 0, throw) == (Exception)null || choiceof(default, 0, throw) is IOException || choiceof(default, 0, throw) == (Exception)null || 
                                                                                                       choiceof(default, 0, throw) is OutOfMemoryException || choiceof(default, 0, throw) == (Exception)null || choiceof(default, 0, throw) is ArgumentOutOfRangeException;
]]></pathAssumption>
<pathCondition><![CDATA[return choiceof(default, 0, close) != false && choiceof(default, 0, peeked) == false && choiceof(default, 0, throw) == (Exception)null;
]]></pathCondition>
</generatedTest>
<log level="message" time="2014-11-11 21:46:44Z" category="coverage" message="coverage increased from 0 to 29 blocks (+29) after flipping Microsoft.Pex.Models.PTextReader.ReadLine at 0x0065"/>
<test name="Main" state="success" duration="0.02"><console stream="out" mode="memory"><![CDATA[System.Runtime.InteropServices.ComVisibleAttribute
System.AttributeUsageAttribute
__DynamicallyInvokableAttribute
System.SerializableAttribute
Boolean AllowMultiple
System.AttributeTargets ValidOn
Boolean Inherited
System.Object TypeId
Zip.Compress
Rar.Compress
]]></console>
</test>
<test name="Main" state="success" duration="0.10"/>
<test name="Main" state="success" duration="0.00"/>
<uninstrumented methodDisplayName="System.String __Auxiliary.String.Concat(System.String s, System.String t)" declaringTypeDisplayName="__Auxiliary.String" methodShortDisplayName="String.Concat(String, String)" wikiTopic="Uninstrumented Method Called"><method name="String.Concat(String, String)"/>
<stackTrace><frame value="  at PathCoverageAndConditionBuilder.UninstrumentedCall(Int32, IMethodSignature, Term[])" method="PathCoverageAndConditionBuilder.UninstrumentedCall(Int32, IMethodSignature, Term[])" offset="90"/>
<frame value="  at EvolvingFrame.EndCall(Int32, EndCallKind)" method="EvolvingFrame.EndCall(Int32, EndCallKind)" offset="45"/>
<frame value="  at InstructionInterpreter.AtCallFallthrough(Int32)" method="InstructionInterpreter.AtCallFallthrough(Int32)" offset="184"/>
<frame value="  at _Checks.AtCallFallthrough(Int32)" method="_Checks.AtCallFallthrough(Int32)" offset="21"/>
<frame value="  at String.Concat(String, String)" method="String.Concat(String, String)" offset="71"/>
<frame value="  at String.Concat(Object, Object)" method="String.Concat(Object, Object)" offset="32"/>
<frame value="  at String.Concat___redirect(Object, Object)" method="String.Concat___redirect(Object, Object)" offset="0"/>
<frame value="  at PTextReader.ReadLine()" method="PTextReader.ReadLine()" offset="138"/>
<frame value="  at SyncTextReader.ReadLine()" method="SyncTextReader.ReadLine()" offset="0"/>
<frame value="  at Console.ReadLine()" method="Console.ReadLine()" offset="5"/>
<frame value="  at Program.Main(String[]) in c:\Users\nitinar\Documents\Visual Studio 2013\Projects\JunkYard\IEnumerable\Program.cs(81)" method="Program.Main(String[])" offset="304" file="c:\Users\nitinar\Documents\Visual Studio 2013\Projects\JunkYard\IEnumerable\Program.cs" line="81"/>
<frame value="  at ProgramTest.Main(String[])" method="ProgramTest.Main(String[])" offset="0"/>
<frame value="  at Microsoft.ExtendedReflection.__DynamicMethods.invoke:JunkYard.E.ProgramTest.Main(ITermConstructor`1&lt;Term&gt;, ITermDestructor`1&lt;Term&gt;, Term[])" method="Microsoft.ExtendedReflection.__DynamicMethods.invoke:JunkYard.E.ProgramTest.Main(ITermConstructor`1&lt;Term&gt;, ITermDestructor`1&lt;Term&gt;, Term[])" offset="-1"/>
<frame value="  at PathExecutorBase.InternalRun(ITermDestructor`1&lt;Term&gt;, PathSegmentPreparer, PathSegmentReporter, IEnumerable`1&lt;PathSegment&gt;)" method="PathExecutorBase.InternalRun(ITermDestructor`1&lt;Term&gt;, PathSegmentPreparer, PathSegmentReporter, IEnumerable`1&lt;PathSegment&gt;)" offset="563"/>
<frame value="  at PathExecutorBase.TryRun(PexPathExecutionResult&amp;, ISubstitution&amp;, IState&amp;)" method="PathExecutorBase.TryRun(PexPathExecutionResult&amp;, ISubstitution&amp;, IState&amp;)" offset="291"/>
<frame value="  at PexPathDriver.InternalRun(Object)" method="PexPathDriver.InternalRun(Object)" offset="670"/>
<frame value="  at PexPathDriver.Run(Object)" method="PexPathDriver.Run(Object)" offset="10"/>
<frame value="  at PexExplorationDriver.InternalExplore()" method="PexExplorationDriver.InternalExplore()" offset="315"/>
<frame value="  at PexExplorationDriverBase.CheckedExploreInternal()" method="PexExplorationDriverBase.CheckedExploreInternal()" offset="14"/>
<frame value="  at PexExplorationDriverBase.Execute()" method="PexExplorationDriverBase.Execute()" offset="6"/>
<frame value="  at PexExplorationDriverBase.Explore()" method="PexExplorationDriverBase.Explore()" offset="451"/>
<frame value="  at PexTestFrameworkDriver.ExecuteExploration(PexExplorationBase)" method="PexTestFrameworkDriver.ExecuteExploration(PexExplorationBase)" offset="134"/>
<frame value="  at PexTestFrameworkDriver.ExecuteFixture(PexFixture)" method="PexTestFrameworkDriver.ExecuteFixture(PexFixture)" offset="317"/>
<frame value="  at PexTestFrameworkDriver.ExecuteAssembly(AssemblyEx)" method="PexTestFrameworkDriver.ExecuteAssembly(AssemblyEx)" offset="220"/>
<frame value="  at PexDriver.ExecuteAssembly()" method="PexDriver.ExecuteAssembly()" offset="50"/>
<frame value="  at PexDriver.ExecuteAll()" method="PexDriver.ExecuteAll()" offset="95"/>
<frame value="  at PexDriver.ExecuteExplorationProtectedInSeparateStack()" method="PexDriver.ExecuteExplorationProtectedInSeparateStack()" offset="132"/>
<frame value="  at &lt;&gt;c__DisplayClass7.&lt;ExecuteExplorationProtected&gt;b__6(Object)" method="&lt;&gt;c__DisplayClass7.&lt;ExecuteExplorationProtected&gt;b__6(Object)" offset="0"/>
<frame value="  at ThreadHelper.ThreadStart_Context(Object)" method="ThreadHelper.ThreadStart_Context(Object)" offset="59"/>
<frame value="  at ExecutionContext.RunInternal(ExecutionContext, ContextCallback, Object, Boolean)" method="ExecutionContext.RunInternal(ExecutionContext, ContextCallback, Object, Boolean)" offset="112"/>
<frame value="  at ExecutionContext.Run(ExecutionContext, ContextCallback, Object, Boolean)" method="ExecutionContext.Run(ExecutionContext, ContextCallback, Object, Boolean)" offset="9"/>
<frame value="  at ExecutionContext.Run(ExecutionContext, ContextCallback, Object)" method="ExecutionContext.Run(ExecutionContext, ContextCallback, Object)" offset="52"/>
<frame value="  at ThreadHelper.ThreadStart(Object)" method="ThreadHelper.ThreadStart(Object)" offset="50"/>
</stackTrace>
</uninstrumented>
<test name="Main" state="success" duration="0.11"><console stream="out" mode="memory"><![CDATA[System.Runtime.InteropServices.ComVisibleAttribute
System.AttributeUsageAttribute
__DynamicallyInvokableAttribute
System.SerializableAttribute
Boolean AllowMultiple
System.AttributeTargets ValidOn
Boolean Inherited
System.Object TypeId
Zip.Compress
Rar.Compress
]]></console>
</test>
<generatedTest id="e7d2d159-4b9b-4b0f-b451-96a633042100" index="2" run="6" status="normaltermination" explorationIsDynamicCode="true" generated="true" new="true"><testMethod name="System.Void JunkYard.E.ProgramTest.Main7001()"/>
<rcov name="Block" dcov="0" dtot="0" acov="29" atot="29"/>
<value name="args">null</value>
<code><![CDATA[using (PexPConsoleInContext.Create())
{
  IPexChoiceRecorder choices = PexChoose.Replay.Setup();
  choices.DefaultSession
      .At(0, "peeked", (object)true)
      .At(1, "peek", (object)' ')
      .At(3, "line", "");
  this.Main((string[])null);
}
]]></code>
<methodCode imports="Microsoft.Pex.Framework.Generated;Microsoft.Pex.Framework"><![CDATA[[PexGeneratedBy(typeof(ProgramTest))]
public void Main7001()
{
    using (PexPConsoleInContext.Create())
    {
      IPexChoiceRecorder choices = PexChoose.Replay.Setup();
      choices.DefaultSession
          .At(0, "peeked", (object)true)
          .At(1, "peek", (object)' ')
          .At(3, "line", "");
      this.Main((string[])null);
    }
}
]]></methodCode>
<reference name="assembly Microsoft.Pex.Framework"/>
<reference name="assembly mscorlib"/>
<reference name="assembly JunkYard.Tests"/>
<pathAssumption><![CDATA[return choiceof(default, 0, throw).GetType() != typeof(OutOfMemoryException) && 
       (choiceof(default, 0, throw) == (Exception)null || choiceof(default, 0, throw) is IOException || choiceof(default, 0, throw) == (Exception)null || 
                                                                                                        choiceof(default, 0, throw) is OutOfMemoryException || choiceof(default, 0, throw) == (Exception)null || choiceof(default, 0, throw) is ArgumentOutOfRangeException) && 
       choiceof(default, 0, line) != (string)null;
]]></pathAssumption>
<pathCondition><![CDATA[return choiceof(default, 0, peeked) != false && choiceof(default, 0, throw) == (Exception)null;
]]></pathCondition>
</generatedTest>
<test name="Main" state="success" duration="0.00"/>
<test name="Main" state="success" duration="0.00"/>
<test name="Main" state="success" duration="0.00"/>
<test name="Main" state="success" duration="0.00"/>
<test name="Main" state="success" duration="0.04"><console stream="out" mode="memory"><![CDATA[System.Runtime.InteropServices.ComVisibleAttribute
System.AttributeUsageAttribute
__DynamicallyInvokableAttribute
System.SerializableAttribute
Boolean AllowMultiple
System.AttributeTargets ValidOn
Boolean Inherited
System.Object TypeId
Zip.Compress
Rar.Compress
]]></console>
</test>
<boundary kind="outofmemory" value="80MB" message="Virtual memory"/>
<generatedTest id="ccc859c6-ac48-466a-846f-20b71929dc8f" index="3" run="11" exceptionState="unexpected" status="exception" explorationIsDynamicCode="true" failed="true" failureText="Exception not validated by PexAllowedExceptionFromTypeUnderTest(typeof(ArgumentException), AcceptExceptionSubtypes), PexAllowedExceptionFromTypeUnderTest(typeof(InvalidOperationException)), documented." generated="true" new="true"><testMethod name="System.Void JunkYard.E.ProgramTest.MainThrowsOutOfMemoryException928()"/>
<rcov name="Block" dcov="0" dtot="0" acov="29" atot="29"/>
<value name="args">null</value>
<code><![CDATA[using (PexPConsoleInContext.Create())
{
  OutOfMemoryException outOfMemoryException;
  outOfMemoryException = new OutOfMemoryException();
  IPexChoiceRecorder choices = PexChoose.Replay.Setup();
  choices.NextSegment(1).DefaultSession
      .At(1, "throw", (object)outOfMemoryException);
  this.Main((string[])null);
}
]]></code>
<methodCode imports="Microsoft.Pex.Framework.Generated;System;Microsoft.Pex.Framework"><![CDATA[[PexGeneratedBy(typeof(ProgramTest))]
[PexRaisedException(typeof(OutOfMemoryException))]
public void MainThrowsOutOfMemoryException928()
{
    using (PexPConsoleInContext.Create())
    {
      OutOfMemoryException outOfMemoryException;
      outOfMemoryException = new OutOfMemoryException();
      IPexChoiceRecorder choices = PexChoose.Replay.Setup();
      choices.NextSegment(1).DefaultSession
          .At(1, "throw", (object)outOfMemoryException);
      this.Main((string[])null);
    }
}
]]></methodCode>
<reference name="assembly Microsoft.Pex.Framework"/>
<reference name="assembly mscorlib"/>
<reference name="assembly JunkYard.Tests"/>
<exceptionChain><exception typeDisplayName="OutOfMemoryException" source="Microsoft.Pex.Framework"><message><![CDATA[Insufficient memory to continue the execution of the program.]]></message>
<type name="System.OutOfMemoryException"/>
</exception>
</exceptionChain>
<pathAssumption><![CDATA[OutOfMemoryException s0 = new;
return choiceof(default, 0, throw) == (Exception)s0 && choiceof(default, 0, throw) != (Exception)null && 
                                                       choiceof(default, 0, peeked) == false && (choiceof(default, 0, throw) == (Exception)null || choiceof(default, 0, throw) is ArgumentOutOfRangeException || 
                                                                                                 choiceof(default, 0, throw) == (Exception)null || choiceof(default, 0, throw) is OutOfMemoryException || choiceof(default, 0, throw) == (Exception)null || choiceof(default, 0, throw) is IOException);
]]></pathAssumption>
</generatedTest>
<test name="Main" state="success" duration="0.01"><console stream="out" mode="memory"><![CDATA[System.Runtime.InteropServices.ComVisibleAttribute
System.AttributeUsageAttribute
__DynamicallyInvokableAttribute
System.SerializableAttribute
Boolean AllowMultiple
System.AttributeTargets ValidOn
Boolean Inherited
System.Object TypeId
Zip.Compress
Rar.Compress
]]></console>
</test>
<generatedTest id="e923f160-34a0-4374-962a-abc710dcdef4" index="4" run="12" exceptionState="unexpected" status="exception" explorationIsDynamicCode="true" failed="true" failureText="Exception not validated by PexAllowedExceptionFromTypeUnderTest(typeof(ArgumentException), AcceptExceptionSubtypes), PexAllowedExceptionFromTypeUnderTest(typeof(InvalidOperationException)), documented." generated="true" new="true"><testMethod name="System.Void JunkYard.E.ProgramTest.MainThrowsIOException402()"/>
<rcov name="Block" dcov="0" dtot="0" acov="29" atot="29"/>
<value name="args">null</value>
<code><![CDATA[using (PexPConsoleInContext.Create())
{
  IOException iOException;
  iOException = new IOException();
  IPexChoiceRecorder choices = PexChoose.Replay.Setup();
  choices.NextSegment(1).DefaultSession
      .At(0, "peeked", (object)true)
      .At(2, "throw", (object)iOException)
      .At(1, "peek", (object)' ');
  this.Main((string[])null);
}
]]></code>
<methodCode imports="Microsoft.Pex.Framework.Generated;System.IO;Microsoft.Pex.Framework"><![CDATA[[PexGeneratedBy(typeof(ProgramTest))]
[PexRaisedException(typeof(IOException))]
public void MainThrowsIOException402()
{
    using (PexPConsoleInContext.Create())
    {
      IOException iOException;
      iOException = new IOException();
      IPexChoiceRecorder choices = PexChoose.Replay.Setup();
      choices.NextSegment(1).DefaultSession
          .At(0, "peeked", (object)true)
          .At(2, "throw", (object)iOException)
          .At(1, "peek", (object)' ');
      this.Main((string[])null);
    }
}
]]></methodCode>
<reference name="assembly Microsoft.Pex.Framework"/>
<reference name="assembly mscorlib"/>
<reference name="assembly JunkYard.Tests"/>
<exceptionChain><exception typeDisplayName="IOException" source="Microsoft.Pex.Framework"><message><![CDATA[I/O error occurred.]]></message>
<type name="System.IO.IOException"/>
</exception>
</exceptionChain>
<pathAssumption><![CDATA[IOException s0 = new;
return choiceof(default, 0, throw) == (Exception)s0 && choiceof(default, 0, throw) != (Exception)null && choiceof(default, 0, peeked) != false && 
                                                                                                         choiceof(default, 0, throw).GetType() != typeof(OutOfMemoryException) && (choiceof(default, 0, throw) == (Exception)null || choiceof(default, 0, throw) is ArgumentOutOfRangeException || 
                                                                                                                                                                                   choiceof(default, 0, throw) == (Exception)null || choiceof(default, 0, throw) is OutOfMemoryException || choiceof(default, 0, throw) == (Exception)null || choiceof(default, 0, throw) is IOException);
]]></pathAssumption>
</generatedTest>
<test name="Main" state="success" duration="0.00"><console stream="out" mode="memory"><![CDATA[System.Runtime.InteropServices.ComVisibleAttribute
System.AttributeUsageAttribute
__DynamicallyInvokableAttribute
System.SerializableAttribute
Boolean AllowMultiple
System.AttributeTargets ValidOn
Boolean Inherited
System.Object TypeId
Zip.Compress
Rar.Compress
]]></console>
</test>
<boundary kind="outofmemory" value="81MB" message="Virtual memory"/>
<test name="Main" state="success" duration="0.00"><console stream="out" mode="memory"><![CDATA[System.Runtime.InteropServices.ComVisibleAttribute
System.AttributeUsageAttribute
__DynamicallyInvokableAttribute
System.SerializableAttribute
Boolean AllowMultiple
System.AttributeTargets ValidOn
Boolean Inherited
System.Object TypeId
Zip.Compress
Rar.Compress
]]></console>
</test>
<test name="Main" state="success" duration="0.01"><console stream="out" mode="memory"><![CDATA[System.Runtime.InteropServices.ComVisibleAttribute
System.AttributeUsageAttribute
__DynamicallyInvokableAttribute
System.SerializableAttribute
Boolean AllowMultiple
System.AttributeTargets ValidOn
Boolean Inherited
System.Object TypeId
Zip.Compress
Rar.Compress
]]></console>
</test>
<generatedTest id="27b98ec1-9c87-4927-bc2a-32f3eae37f61" index="5" run="15" exceptionState="unexpected" status="exception" explorationIsDynamicCode="true" failed="true" failureText="Exception not validated by PexAllowedExceptionFromTypeUnderTest(typeof(ArgumentException), AcceptExceptionSubtypes), PexAllowedExceptionFromTypeUnderTest(typeof(InvalidOperationException)), documented." generated="true" new="true"><testMethod name="System.Void JunkYard.E.ProgramTest.MainThrowsArgumentOutOfRangeException393()"/>
<rcov name="Block" dcov="0" dtot="0" acov="29" atot="29"/>
<value name="args">null</value>
<code><![CDATA[using (PexPConsoleInContext.Create())
{
  ArgumentOutOfRangeException argumentOutOfRangeException;
  argumentOutOfRangeException = new ArgumentOutOfRangeException();
  IPexChoiceRecorder choices = PexChoose.Replay.Setup();
  choices.NextSegment(1).DefaultSession
      .At(0, "peeked", (object)true)
      .At(2, "throw", (object)argumentOutOfRangeException)
      .At(1, "peek", (object)' ');
  this.Main((string[])null);
}
]]></code>
<methodCode imports="Microsoft.Pex.Framework.Generated;System;Microsoft.Pex.Framework"><![CDATA[[PexGeneratedBy(typeof(ProgramTest))]
[PexRaisedException(typeof(ArgumentOutOfRangeException))]
public void MainThrowsArgumentOutOfRangeException393()
{
    using (PexPConsoleInContext.Create())
    {
      ArgumentOutOfRangeException argumentOutOfRangeException;
      argumentOutOfRangeException = new ArgumentOutOfRangeException();
      IPexChoiceRecorder choices = PexChoose.Replay.Setup();
      choices.NextSegment(1).DefaultSession
          .At(0, "peeked", (object)true)
          .At(2, "throw", (object)argumentOutOfRangeException)
          .At(1, "peek", (object)' ');
      this.Main((string[])null);
    }
}
]]></methodCode>
<reference name="assembly Microsoft.Pex.Framework"/>
<reference name="assembly mscorlib"/>
<reference name="assembly JunkYard.Tests"/>
<exceptionChain><exception typeDisplayName="ArgumentOutOfRangeException" source="Microsoft.Pex.Framework"><message><![CDATA[Specified argument was out of the range of valid values.]]></message>
<type name="System.ArgumentOutOfRangeException"/>
<value name="paramName"/>
<value name="actualValue"/>
</exception>
</exceptionChain>
<pathAssumption><![CDATA[ArgumentOutOfRangeException s0 = new;
return choiceof(default, 0, throw) == (Exception)s0 && 
       choiceof(default, 0, throw) != (Exception)null && choiceof(default, 0, peeked) != false && choiceof(default, 0, throw).GetType() != typeof(OutOfMemoryException) && 
                                                                                                  choiceof(default, 0, throw).GetType() != typeof(IOException) && (choiceof(default, 0, throw) == (Exception)null || choiceof(default, 0, throw) is ArgumentOutOfRangeException || 
                                                                                                                                                                   choiceof(default, 0, throw) == (Exception)null || choiceof(default, 0, throw) is OutOfMemoryException || choiceof(default, 0, throw) == (Exception)null || choiceof(default, 0, throw) is IOException);
]]></pathAssumption>
</generatedTest>
<test name="Main" state="success" duration="0.00"><console stream="out" mode="memory"><![CDATA[System.Runtime.InteropServices.ComVisibleAttribute
System.AttributeUsageAttribute
__DynamicallyInvokableAttribute
System.SerializableAttribute
Boolean AllowMultiple
System.AttributeTargets ValidOn
Boolean Inherited
System.Object TypeId
Zip.Compress
Rar.Compress
]]></console>
</test>
<test name="Main" state="success" duration="0.00"><console stream="out" mode="memory"><![CDATA[System.Runtime.InteropServices.ComVisibleAttribute
System.AttributeUsageAttribute
__DynamicallyInvokableAttribute
System.SerializableAttribute
Boolean AllowMultiple
System.AttributeTargets ValidOn
Boolean Inherited
System.Object TypeId
Zip.Compress
Rar.Compress
]]></console>
</test>
<coverage domain="usercodeundertest" unit="block" covered="29" total="29" coveredRatio="1"/>
<result name="Main(String[])" state="success" duration="3.20857883323956"/>
<duration start="2014-11-11 21:46:42Z" end="2014-11-11 21:46:45Z" seconds="3.2433243"/>
</exploration>
<coverage domain="usercodeundertest" unit="block" covered="29" total="29" coveredRatio="1"/>
<duration start="2014-11-11 21:46:42Z" end="2014-11-11 21:46:45Z" seconds="3.3923392"/>
</fixture>
<coverage domain="usercodeundertest" unit="block" covered="29" total="29" coveredRatio="1"/>
<duration start="2014-11-11 21:46:42Z" end="2014-11-11 21:46:45Z" seconds="3.550355"/>
<frameTreeRef exceptionCount="3"/>
</assembly>
<duration start="2014-11-11 21:46:40Z" end="2014-11-11 21:46:45Z" seconds="4.9884988"/>
<background/>
</pex>
